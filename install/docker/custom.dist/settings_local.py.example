# Modify and put this file to custom/settings_local.py if needed to
# overload django settings.py

####
# LDAP authentication
# Documentation: https://django-auth-ldap.readthedocs.io
####
import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# Baseline configuration.
AUTH_LDAP_SERVER_URI = "ldap://ldap.example.com"
AUTH_LDAP_BIND_DN = "cn=ue-service,dc=example,dc=com"
AUTH_LDAP_BIND_PASSWORD = "********"
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "ou=users,dc=example,dc=com", ldap.SCOPE_SUBTREE, "(samAccountName=%(user)s)"
)

# Set up the basic group parameters.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    "ou=updatengine,ou=groups,dc=example,dc=com", ldap.SCOPE_SUBTREE, "(objectClass=group)",
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# Simple group restrictions.
AUTH_LDAP_REQUIRE_GROUP = "cn=enabled,ou=updatengine,ou=groups,dc=example,dc=com"
# AUTH_LDAP_DENY_GROUP = "cn=disabled,ou=updatengine,ou=groups,dc=example,dc=com"

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

# Define special user types using groups. Exercise great caution when assigning superuser status.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    # "is_active": "cn=active,ou=updatengine,ou=groups,dc=example,dc=com",
    "is_staff": "cn=staff,ou=updatengine,ou=groups,dc=example,dc=com",
    "is_superuser": "cn=superuser,ou=updatengine,ou=groups,dc=example,dc=com",
}

# Update users fields every time the user logs in (Default: True).
AUTH_LDAP_ALWAYS_UPDATE_USER = True

# Prevent the creation of new users during authentication (Default: False).
# If false, the user must exist locally to allow login.
# AUTH_LDAP_NO_NEW_USERS = True

# Use LDAP group membership to calculate group permissions.
AUTH_LDAP_FIND_GROUP_PERMS = True

# Cache distinguished names and group memberships for an hour to minimize
# LDAP traffic.
AUTH_LDAP_CACHE_TIMEOUT = 3600

# Authentication backend
# Keep ModelBackend around for per-user permissions and maybe a local superuser.
# Django default backend 'ModelBackend' does not support 'ALLOW_LOCAL_LOGON'
# and always allowed local authentication
# AUTHENTICATION_BACKENDS = (
#     'auth.backends.LDAPBackend',  # Custom LDAP backend
#     'auth.backends.AuthBackend',  # Custom local backend
#     # 'django.contrib.auth.backends.ModelBackend',
# )

# ALLOW_LOCAL_LOGON for Custom local backend. Useful to allow/deny LDAP
# user to logon locally
AUTH_LDAP_ALLOW_LOCAL_LOGON = True

# Map local groups according to LDAP groups
# AUTH_LDAP_GROUP_MAP = {
#     "Super Admin": "cn=ue.superadmin,ou=updatengine,ou=groups,dc=example,dc=com",
#     "Admin": "cn=ue.admin,ou=updatengine,ou=groups,dc=example,dc=com",
#     "Operator": "cn=ue.operator,ou=updatengine,ou=groups,dc=example,dc=com",
# }


####
# LOGGING settings
####
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
