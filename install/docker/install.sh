#!/bin/bash

################################################
## UpdatEngine-server docker installation script
## 2023/07/20
################################################
#
################################################

if [ ! -x "$(command -v docker-compose)" ]; then
  echo 'Error: docker-compose is not installed.' >&2
  exit 1
fi

if [ ! -x "$(command -v openssl)" ]; then
  echo 'Error: openssl is not installed.' >&2
  exit 1
fi

mkdir -p ./custom

if [ ! -f ./custom/.env ]; then
  echo "################"
  echo "WARNING: The installer will used default site settings. Edit the 'custom/.env' file with your own settings."
  echo "################"
  cp .env.default ./custom/.env
  while true; do
      read -p "Do you wish to continue with the default settings (y/n) ? " yn
      case $yn in
          [Yy]* ) break;;
          [Nn]* ) echo "Please set your settings in 'custom/.env' file and re-run the installation script."; exit;;
          * ) echo "Please answer yes or no.";;
      esac
  done

else
  echo "################"
  echo "INFORMATION: The installer is using the settings from 'custom/.env' file."
  echo "################"
fi

export $(cat ./custom/.env) > /dev/null 2>&1
if [ "$CONFIG_TYPE" = "LETSENCRYPT" ]; then
    echo "################"
    echo "ERROR: LETSENCRYPT option is not yet supported."
    echo "################"
    exit 1
fi

if [ -f ./custom/nginx/nginx.conf ] || [ -f ./custom/docker-compose.yml ]; then
    echo "################"
    echo "WARNING: It exists configuration files in the 'custom' directory."
    echo "Please remove them if you wish a new autogenerated configuration. Otherwise, existing files are kept."
    echo "################"
fi

if [ "$CONFIG_TYPE" = "HTTP_REDIRECT" ] || [ "$CONFIG_TYPE" = "LETSENCRYPT" ]; then
    CONFIG_TYPE=.$CONFIG_TYPE
else
    unset CONFIG_TYPE
fi

if [ ! -f ./custom/nginx/nginx.conf ]; then
    mkdir -p ./custom/nginx
    export DOLLAR='$'
    envsubst < ./nginx/nginx.conf.in$CONFIG_TYPE > ./custom/nginx/nginx.conf
fi

if ([ ! -f ./custom/ssl/site.key ] ||  [ ! -f ./custom/ssl/site.crt ]) && [ "$CONFIG_TYPE" != "LETSENCRYPT" ]; then
    mkdir -p ./custom/ssl
    openssl req --new -newkey rsa:2048 -days 365 -nodes -x509 -keyout ./custom/ssl/site.key -out ./custom/ssl/site.crt -subj "/O=UpdatEngine-NG/CN=updatengine-ng.com" > /dev/null 2>&1
fi

if [ ! -f ./custom/docker-compose.yml ]; then
    envsubst < docker-compose.yml$CONFIG_TYPE > ./custom/docker-compose.yml
fi

BASE_DIR='../..'
cp Dockerfile $BASE_DIR/
cp entrypoint.sh $BASE_DIR/
cp ./custom/docker-compose.yml $BASE_DIR/
cp ./custom/.env $BASE_DIR/
cat $BASE_DIR/requirements/pip-packages.txt requirements.txt > $BASE_DIR/requirements.txt

cd $BASE_DIR
git pull
docker-compose up -d --build

# Create admin account if none
docker exec -it updatengine-server bash -c "echo 'select count(*) from auth_user;' | python manage.py dbshell | grep -v 'count' | grep 0" > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "################"
    echo "# CREATE ADMIN ACCOUNT"
    echo "# You can skip this step using CTRL-C and run the following command later:"
    echo "# docker exec -it updatengine-server python manage.py createsuperuser"
    echo "################"
    docker exec -it updatengine-server bash -c "python manage.py createsuperuser"
fi
